*&———————————————————————*
*& Report Z_UP_DL_TRANSPORT
*&
*&———————————————————————*
*& Up- & download of transports
*&
*&———————————————————————*
report z_up_dl_transport line-size 170. "#EC

* Selection screen *
parameters p_trkorr type e070-trkorr
obligatory.
parameters p_path type rlgrap-filename
obligatory
default 'C:\Temp\'.
selection-screen skip.
parameters p_down radiobutton group func
default 'X'.
parameters p_up radiobutton group func.

* Global data *
type-pools sabc.

data gv_path type rlgrap-filename.
data gv_path_cofile type rlgrap-filename.
data gv_path_data type rlgrap-filename.
data gv_path_bin type rlgrap-filename.

data gv_file_k type rlgrap-filename.
data gv_file_r type rlgrap-filename.
data gv_file_d type rlgrap-filename.

data gv_separator type c.

* Complete local path *
at selection-screen.
  perform check_path.

start-of-selection.
* Determine transport base directory *
  call 'C_SAPGPARAM'
  id 'NAME' field 'DIR_TRANS'
  id 'VALUE' field gv_path.

* Determine file/path separator *
  if sy-opsys = 'Windows NT'.
    gv_separator = '\'.
  else.
    gv_separator = '/'.
  endif.

* Determine transport directories *
  concatenate gv_path gv_separator 'cofiles' gv_separator
  into gv_path_cofile.

  concatenate gv_path gv_separator 'data' gv_separator
  into gv_path_data.

  concatenate gv_path gv_separator 'data' gv_separator
  into gv_path_bin.

  write / 'Download files from paths:'(t01).
  write / gv_path_cofile.
  write / gv_path_data.
  write / gv_path_bin.
  skip.

* Build filenames *
  concatenate p_trkorr+3(7) p_trkorr+0(3)
  into gv_file_k
  separated by '.'.

  concatenate 'R' p_trkorr+4(6) '.' p_trkorr+0(3)
  into gv_file_r.

  concatenate 'D' p_trkorr+4(6) '.' p_trkorr+0(3)
  into gv_file_d.

* Up- or download transport request *
  if p_down = 'X'.
    perform download
    using gv_path_cofile
    p_path
    gv_file_k.
    perform download
    using gv_path_data
    p_path
    gv_file_r.
    perform download
    using gv_path_data
    p_path
    gv_file_d.
  else.
    perform upload
    using p_path
    gv_path_cofile
    gv_file_k.

    perform upload
    using p_path
    gv_path_data
    gv_file_r.

    perform upload
    using p_path
    gv_path_data
    gv_file_d.
  endif.

*&———————————————————————*
*& Form download
*&———————————————————————*
* Download transport file(s)
*———————————————————————-*
* –>VALUE(P_SRCPATH) Source path
* –>VALUE(p_DSTPATH) Destination path
* –>VALUE(P_FILE) Filename
*———————————————————————-*
form download
using value(p_srcpath) type rlgrap-filename
value(p_dstpath) type rlgrap-filename
value(p_file) type rlgrap-filename.

  types begin of lst_buffer.
  types data type x length 1024.
  types end of lst_buffer.

  data lt_buffer type table of lst_buffer.
  data ls_buffer type lst_buffer.
  data lv_filename type rlgrap-filename.
  data lv_reclen type i.
  data lv_filelen type i.

* Read input file *
  concatenate p_srcpath p_file
  into lv_filename.

  open dataset lv_filename for input in binary mode.

  check sy-subrc = 0.

  do.
    read dataset lv_filename
    into ls_buffer
    length lv_reclen.

    if lv_reclen = 0.
      exit.
    endif.

    lv_filelen = lv_filelen + lv_reclen.

    append ls_buffer to lt_buffer.
  enddo.

  close dataset lv_filename.

* Download file *
  concatenate p_dstpath p_file
  into lv_filename.

  call function 'WS_DOWNLOAD'
    exporting
      bin_filesize = lv_filelen
      filename     = lv_filename
      filetype     = 'BIN'
    tables
      data_tab     = lt_buffer
    exceptions
      others       = 1.

  check sy-subrc = 0.

  write / 'Downloaded:'(t02).
  write (150) p_file.
endform. "download

*&———————————————————————*
*& Form upload
*&———————————————————————*
* Upload transport file(s)
*———————————————————————-*
* –>VALUE(P_SRCPATH) Source path
* –>VALUE(p_DSTPATH) Destination path
* –>VALUE(P_FILE) Filename
*———————————————————————-*
form upload
using value(p_srcpath) type rlgrap-filename
value(p_dstpath) type rlgrap-filename
value(p_file) type rlgrap-filename.

  types begin of lst_buffer.
  types data type x length 1024.
  types end of lst_buffer.

  data lt_buffer type table of lst_buffer.
  data ls_buffer type lst_buffer.
  data lv_filename type rlgrap-filename.
  data lv_reclen type i.
  data lv_filelen type i.
  data lv_result type c.

* Check if file exists *
  concatenate p_srcpath p_file
  into lv_filename.

  call function 'WS_QUERY'
    exporting
      filename = lv_filename
      query    = 'FE'
    importing
      return   = lv_result
    exceptions
      others   = 1.
  check sy-subrc = 0
  and lv_result = '1'.

* Upload file *
  call function 'WS_UPLOAD'
    exporting
      filename   = lv_filename
      filetype   = 'BIN'
    importing
      filelength = lv_filelen
    tables
      data_tab   = lt_buffer
    exceptions
      others     = 1.

* Write file to server *
  concatenate p_dstpath p_file
  into lv_filename.

  open dataset lv_filename for output in binary mode.
  check sy-subrc = 0.

  loop at lt_buffer into ls_buffer.
    describe field ls_buffer-data
    length lv_reclen in byte mode.

    if lv_filelen > lv_reclen.
      lv_filelen = lv_filelen - lv_reclen.
    else.
      lv_reclen = lv_filelen.
    endif.

    transfer ls_buffer to lv_filename length lv_reclen.
  endloop.

  close dataset lv_filename.

  write / 'Uploaded:'(t03).
  write (150) p_file.
endform. "upload

*&———————————————————————*
*& Form CHECK_PATH
*&———————————————————————*
* Check path
*———————————————————————-*
form check_path .
data lv_pos type i.
data lv_temp type c.

lv_pos = strlen( p_path ) - 1.
lv_temp = p_path+lv_pos(1).

check not lv_temp = '\'.

concatenate p_path '\'
into p_path.
endform.
" check_path
